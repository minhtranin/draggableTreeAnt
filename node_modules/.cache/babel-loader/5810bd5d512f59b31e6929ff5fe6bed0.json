{"ast":null,"code":"import _toConsumableArray from \"/home/minhtranin/work/treenode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/minhtranin/work/treenode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/minhtranin/work/treenode/src/Dragable.js\";\n\nimport React, { useState, useRef, useEffect, createRef } from \"react\";\nimport { TreeSelect, Input, Select, Button, Tree } from \"antd\";\nimport { FolderFilled, DeleteTwoTone, SaveTwoTone } from \"@ant-design/icons\";\nimport './styles.css';\nvar TreeNode = Tree.TreeNode;\nvar Option = Select.Option;\nvar Search = Input.Search;\n\nvar Model = function Model() {\n  var treeData = [{\n    title: \"label\",\n    description: 'Visible to Everyone',\n    key: \"0\",\n    default: 'My folder name 1',\n    children: [{\n      title: \"select\",\n      default: 'all',\n      key: \"0-0\",\n      isLeaf: true\n    }, {\n      title: \"selectall\",\n      default: ['lucy'],\n      key: \"0-1\",\n      isLeaf: true\n    }, {\n      title: 'action',\n      key: \"0-2\",\n      isLeaf: true\n    }]\n  }];\n  var newDataDefault = {\n    title: \"input\",\n    description: 'Visible to Everyone',\n    default: '',\n    children: [{\n      title: \"select\",\n      default: 'all',\n      isLeaf: true\n    }, {\n      title: \"selectall\",\n      default: [],\n      isLeaf: true\n    }, {\n      title: 'action',\n      isLeaf: true\n    }]\n  };\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      open = _useState2[0],\n      setOpen = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      value = _useState4[0],\n      setValue = _useState4[1];\n\n  var _useState5 = useState(treeData),\n      _useState6 = _slicedToArray(_useState5, 2),\n      data = _useState6[0],\n      setData = _useState6[1];\n\n  var _useState7 = useState(undefined),\n      _useState8 = _slicedToArray(_useState7, 2),\n      search = _useState8[0],\n      setSearch = _useState8[1];\n\n  var arrLength = data.length;\n  var elRefs = useRef([]);\n  useEffect(function () {\n    if (elRefs.current.length !== arrLength) {\n      elRefs.current = Array(arrLength).fill().map(function (_, i) {\n        return elRefs.current[i] || createRef();\n      });\n    }\n  }, [data, arrLength]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"400px\",\n      margin: '30px auto'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TreeSelect, {\n    treeIcon: true,\n    treeDefaultExpandAll: true,\n    listHeight: 500,\n    showSearch: true,\n    className: \"g-tree-select\",\n    value: value,\n    onInputKeyDown: function onInputKeyDown(e) {\n      e.preventDefault();\n    },\n    filterTreeNode: function filterTreeNode(text, item) {\n      if (!data[item.value]) {\n        return false;\n      }\n\n      if (!data[item.value].default) return false;\n      return data[item.value].default.toLowerCase().indexOf(text.toLowerCase()) !== -1 || data[item.value].description.toLowerCase().indexOf(text.toLowerCase()) !== -1;\n    },\n    searchValue: search,\n    dropdownRender: function dropdownRender(prop) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"g-search-header\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Search, {\n        placeholder: \"Search\",\n        style: {\n          width: '254px'\n        },\n        onChange: function onChange(ev) {\n          var textSearch = ev.target.value;\n          setSearch(textSearch);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        onClick: function onClick() {\n          var newData = [newDataDefault].concat(_toConsumableArray(data));\n          setData(newData);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }\n      }, \"Add New Folder\")), prop);\n    },\n    style: {\n      marginBottom: 8,\n      width: '100%'\n    },\n    placeholder: \"Please select\",\n    open: open,\n    onChange: function onChange(vl) {\n      setValue(vl);\n      setOpen(false);\n    },\n    onFocus: function onFocus(e) {\n      setOpen(true);\n      e.preventDefault();\n    },\n    onBlur: function onBlur() {},\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Tree, {\n    showIcon: false,\n    selectable: false,\n    draggable: true,\n    blockNode: true,\n    className: \"draggable-tree\",\n    key: \"000\",\n    title: 'qweqwe',\n    onDragEnter: function onDragEnter() {\n      console.log('++++');\n    },\n    onDrop: function onDrop() {\n      console.log('----');\n    } //  isLeaf\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, data.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(TreeNode, {\n      key: index,\n      value: index,\n      icon: /*#__PURE__*/React.createElement(FolderFilled, {\n        style: {\n          fontSize: '20px',\n          paddingTop: '10px'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }\n      }),\n      isLeaf: item.title === 'label',\n      selectable: item.title === 'label',\n      title: /*#__PURE__*/React.createElement(React.Fragment, null, item.title === 'input' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, {\n        style: {\n          width: '202px'\n        },\n        onClick: function onClick() {\n          if (elRefs.current[index].current) {\n            elRefs.current[index].current.focus();\n          }\n        },\n        ref: elRefs.current[index],\n        placeholder: \"Enter new folder name\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 23\n        }\n      })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: '10px'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }\n      }, item.default), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: '35px',\n          fontSize: '11px'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 25\n        }\n      }, item.description))),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 20\n      }\n    }, item.title === 'input' && item.children.map(function (chil, cid) {\n      return /*#__PURE__*/React.createElement(TreeNode, {\n        key: \"\".concat(index, \"-\").concat(cid),\n        selectable: false,\n        value: \"\".concat(index, \"-\").concat(cid),\n        title: /*#__PURE__*/React.createElement(React.Fragment, null, chil.title === 'select' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Select, {\n          defaultValue: chil.default,\n          style: {\n            width: '202px'\n          },\n          onChange: function onChange(sc) {\n            var newData = data;\n            newData[index].children[cid].default = sc;\n            newData[index].children[cid + 1].default = [];\n            var children = newData[index].children.filter(function (e) {\n              return e.title !== 'selectall';\n            });\n\n            if (sc === 'one') {\n              newData[index].children = children;\n              newData[index].description = 'Visible to specific users';\n            }\n\n            if (sc === 'all') {\n              newData[index].description = 'Visible to Everyone';\n              newData[index].children = [children[0], newDataDefault.children[1], children[1]];\n            }\n\n            setData(_toConsumableArray(newData));\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(Option, {\n          value: \"all\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 31\n          }\n        }, \"Visible to Everyone\"), /*#__PURE__*/React.createElement(Option, {\n          value: \"one\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 31\n          }\n        }, \"Visible to specific users\"))) : chil.title === 'selectall' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Select, {\n          defaultValue: chil.default,\n          placeholder: \"Select a name\",\n          mode: \"multiple\",\n          style: {\n            width: '202px'\n          },\n          onChange: function onChange(sla) {\n            var newData = data;\n            newData[index].children[cid].default = sla;\n            setData(_toConsumableArray(newData));\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(Option, {\n          value: \"jack\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 31\n          }\n        }, \"Jack\"), /*#__PURE__*/React.createElement(Option, {\n          value: \"lucy\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 31\n          }\n        }, \"Lucy\"))) : chil.title === 'action' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"g-action\",\n          style: {\n            width: '202px'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(SaveTwoTone, {\n          twoToneColor: \"#44AEA0\",\n          style: {\n            fontSize: '25px'\n          },\n          onClick: function onClick() {\n            var newData = data;\n            var folderName = elRefs.current[index].current.state.value;\n            if (!folderName) return;\n            newData[index].title = 'label';\n            newData[index].default = folderName;\n            setData(_toConsumableArray(newData));\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 31\n          }\n        }), /*#__PURE__*/React.createElement(DeleteTwoTone, {\n          twoToneColor: \"#D3455C\",\n          style: {\n            fontSize: '25px'\n          },\n          onClick: function onClick() {\n            var newData = data.filter(function (_, i) {\n              return index !== i;\n            });\n            setData(_toConsumableArray(newData));\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 31\n          }\n        }))) : ''),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 26\n        }\n      });\n    }));\n  }))));\n};\n\nexport default Model;","map":{"version":3,"sources":["/home/minhtranin/work/treenode/src/Dragable.js"],"names":["React","useState","useRef","useEffect","createRef","TreeSelect","Input","Select","Button","Tree","FolderFilled","DeleteTwoTone","SaveTwoTone","TreeNode","Option","Search","Model","treeData","title","description","key","default","children","isLeaf","newDataDefault","open","setOpen","undefined","value","setValue","data","setData","search","setSearch","arrLength","length","elRefs","current","Array","fill","map","_","i","width","margin","e","preventDefault","text","item","toLowerCase","indexOf","prop","ev","textSearch","target","newData","marginBottom","vl","console","log","index","fontSize","paddingTop","focus","paddingLeft","chil","cid","sc","filter","sla","folderName","state"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, createRef } from \"react\";\nimport { TreeSelect, Input, Select, Button, Tree } from \"antd\";\nimport { FolderFilled, DeleteTwoTone, SaveTwoTone } from \"@ant-design/icons\";\nimport './styles.css'\nconst { TreeNode } = Tree;\nconst { Option } = Select;\nconst { Search } = Input;\n\n\nconst Model = () => {\n  const treeData = [\n    {\n      title: \"label\",\n      description: 'Visible to Everyone',\n      key: \"0\",\n      default: 'My folder name 1',\n      children: [\n        {\n          title: \"select\",\n          default: 'all',\n          key: \"0-0\",\n          isLeaf: true\n        },\n        {\n          title: \"selectall\",\n          default: ['lucy'],\n          key: \"0-1\",\n          isLeaf: true\n        },\n        {\n          title: 'action',\n          key: \"0-2\",\n          isLeaf: true\n        }\n      ]\n    },\n  ];\n  const newDataDefault = {\n    title: \"input\",\n    description: 'Visible to Everyone',\n    default: '',\n    children: [\n      {\n        title: \"select\",\n        default: 'all',\n        isLeaf: true\n      },\n      {\n        title: \"selectall\",\n        default: [],\n        isLeaf: true\n      },\n      {\n        title: 'action',\n        isLeaf: true\n      }\n    ]\n  }\n\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(undefined);\n  const [data, setData] = useState(treeData)\n  const [search, setSearch] = useState(undefined)\n  const arrLength = data.length\n  const elRefs = useRef([])\n\n  useEffect(() => {\n    if (elRefs.current.length !== arrLength) {\n      elRefs.current = Array(arrLength).fill().map((_, i) => elRefs.current[i] || createRef());\n    }\n  }, [data, arrLength])\n\n  return (\n    <div style={{ width: \"400px\", margin: '30px auto' }}>\n      <TreeSelect\n        treeIcon\n        treeDefaultExpandAll\n        listHeight={500}\n        showSearch\n        className='g-tree-select'\n        value={value}\n        onInputKeyDown={(e) => {\n          e.preventDefault()\n        }}\n        filterTreeNode={(text, item) => {\n          if (!data[item.value]) {\n            return false\n          }\n          if (!data[item.value].default) return false\n          return data[item.value].default.toLowerCase().indexOf(text.toLowerCase()) !== -1 ||\n          data[item.value].description.toLowerCase().indexOf(text.toLowerCase()) !== -1\n        }}\n        searchValue={search}\n        dropdownRender={(prop) => {\n          return <>\n            <div className=\"g-search-header\">\n              <Search\n                placeholder=\"Search\"\n                style={{ width: '254px' }}\n                onChange={(ev) => {\n                  const textSearch = ev.target.value\n                  setSearch(textSearch) \n                }}\n              />\n              <Button\n                onClick={() => {\n                  const newData = [newDataDefault,...data]\n                  setData(newData)\n                }}\n              >\n                Add New Folder\n              </Button>\n            </div>\n            {prop}\n          </>\n        }}\n        style={{ marginBottom: 8, width: '100%' }}\n        placeholder=\"Please select\"\n        open={open}\n        onChange={(vl) => {\n          setValue(vl)\n          setOpen(false)\n        }}\n        onFocus={(e) => {\n          setOpen(true)\n          e.preventDefault()\n        }}\n        onBlur={() => {\n        }}\n      >\n        <Tree\n         showIcon={false}\n         selectable={false}\n         draggable\n         blockNode\n         className=\"draggable-tree\"\n         key=\"000\"\n         title={'qweqwe'}\n         onDragEnter={() => {\n           console.log('++++')\n         }}\n          onDrop={() => {\n            console.log('----')\n          }}\n        //  isLeaf\n        >\n        {\n          data.map((item, index) => {\n            return <TreeNode\n              key={index}\n              value={index}\n              icon={<FolderFilled style={{ fontSize: '20px', paddingTop: '10px' }} />}\n              isLeaf={item.title === 'label'}\n              selectable={item.title === 'label'}\n              title={\n                <>\n                  {\n                    item.title === 'input' ? <>\n                      <Input\n                        style={{ width: '202px' }}\n                        onClick={() => {\n                          if(elRefs.current[index].current) {\n                            elRefs.current[index].current.focus()\n                          }\n                        }}\n                        ref={elRefs.current[index]} placeholder=\"Enter new folder name\" />\n                    </> : <>\n                        <span style={{ paddingLeft: '10px'}}>{item.default}</span>\n                        <br></br>\n                        <span style={{ paddingLeft: '35px', fontSize: '11px' }}>{item.description}</span>\n                    </>\n                  }\n                </>\n              }\n            >\n              {item.title === 'input' &&\n                item.children.map((chil, cid) => {\n                  return <TreeNode\n                    key={`${index}-${cid}`}\n                    selectable={false}\n                    value={`${index}-${cid}`}\n                    title={\n                      <>\n                        {\n                          chil.title === 'select' ? <>\n                            <Select\n                              defaultValue={chil.default}\n                              style={{ width: '202px' }}\n                              onChange={(sc) => {\n                                const newData = data\n                                newData[index].children[cid].default = sc\n                                newData[index].children[cid+1].default = []\n                                const children = newData[index].children.filter(e => e.title !== 'selectall')\n                                if (sc === 'one') {\n                                  newData[index].children = children\n                                  newData[index].description = 'Visible to specific users'\n                                }\n                                if (sc === 'all') {\n                                  newData[index].description = 'Visible to Everyone'\n                                  newData[index].children = [\n                                    children[0],\n                                    newDataDefault.children[1],\n                                    children[1],\n                                  ]\n                                }\n                                setData([...newData])\n                                \n                              }}\n                            >\n                              <Option value=\"all\">Visible to Everyone</Option>\n                              <Option value=\"one\">Visible to specific users</Option>\n                            </Select>\n                          </> : chil.title === 'selectall' ? <>\n                            <Select\n                              defaultValue={chil.default}\n                              placeholder=\"Select a name\"\n                              mode=\"multiple\"\n                              style={{ width: '202px' }}\n                              onChange={(sla) => {\n                                const newData = data\n                                newData[index].children[cid].default = sla\n                                setData([...newData])\n                                \n                              }}\n                            >\n                              <Option value=\"jack\">Jack</Option>\n                              <Option value=\"lucy\">Lucy</Option>\n                            </Select>\n                          </> : chil.title === 'action' ? <>\n                            <div\n                              className=\"g-action\"\n                              style={{\n                                width: '202px',\n                              }}\n                            >\n                              <SaveTwoTone\n                                twoToneColor=\"#44AEA0\"\n                                style={{ fontSize: '25px' }}\n                                onClick={() => {\n                                  const newData = data\n                                  const folderName = elRefs.current[index].current.state.value\n                                  if (!folderName) return\n                                  newData[index].title = 'label'\n                                  newData[index].default = folderName\n                                  setData([...newData])\n                                }}\n                              />\n                              <DeleteTwoTone\n                                twoToneColor=\"#D3455C\"\n                                style={{ fontSize: '25px' }}\n                                onClick={() => {\n                                  const newData = data.filter((_, i) => index !== i)\n                                  setData([...newData])\n                                }}\n                              />\n\n                            </div>\n                          </> : ''\n                        }\n                      </>\n                    }\n                  />\n                })\n              }\n            </TreeNode>\n          })\n        }\n        </Tree>\n      </TreeSelect>\n    </div>\n  );\n};\n\nexport default Model;\n"]},"metadata":{},"sourceType":"module"}