{"ast":null,"code":"import * as React from 'react';\nimport ResizeObserver from 'rc-resize-observer';\nimport BodyRow from './BodyRow';\nimport TableContext from '../context/TableContext';\nimport ExpandedRow from './ExpandedRow';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport ResizeContext from '../context/ResizeContext';\n\nfunction Body(_ref) {\n  var data = _ref.data,\n      getRowKey = _ref.getRowKey,\n      measureColumnWidth = _ref.measureColumnWidth,\n      stickyOffsets = _ref.stickyOffsets,\n      expandedKeys = _ref.expandedKeys,\n      onRow = _ref.onRow,\n      rowExpandable = _ref.rowExpandable,\n      emptyNode = _ref.emptyNode,\n      childrenColumnName = _ref.childrenColumnName;\n\n  var _React$useContext = React.useContext(ResizeContext),\n      onColumnResize = _React$useContext.onColumnResize;\n\n  var _React$useContext2 = React.useContext(TableContext),\n      prefixCls = _React$useContext2.prefixCls,\n      getComponent = _React$useContext2.getComponent;\n\n  var _React$useContext3 = React.useContext(BodyContext),\n      fixHeader = _React$useContext3.fixHeader,\n      horizonScroll = _React$useContext3.horizonScroll,\n      flattenColumns = _React$useContext3.flattenColumns,\n      componentWidth = _React$useContext3.componentWidth;\n\n  return React.useMemo(function () {\n    var WrapperComponent = getComponent(['body', 'wrapper'], 'tbody');\n    var trComponent = getComponent(['body', 'row'], 'tr');\n    var tdComponent = getComponent(['body', 'cell'], 'td');\n    var rows;\n\n    if (data.length) {\n      rows = data.map(function (record, index) {\n        var key = getRowKey(record, index);\n        return [React.createElement(BodyRow, {\n          key: key,\n          rowKey: key,\n          record: record,\n          recordKey: key,\n          index: index,\n          rowComponent: trComponent,\n          cellComponent: tdComponent,\n          stickyOffsets: stickyOffsets,\n          expandedKeys: expandedKeys,\n          onRow: onRow,\n          getRowKey: getRowKey,\n          rowExpandable: rowExpandable,\n          childrenColumnName: childrenColumnName\n        })];\n      });\n    } else {\n      rows = React.createElement(ExpandedRow, {\n        expanded: true,\n        className: \"\".concat(prefixCls, \"-placeholder\"),\n        prefixCls: prefixCls,\n        fixHeader: fixHeader,\n        fixColumn: horizonScroll,\n        horizonScroll: horizonScroll,\n        component: trComponent,\n        componentWidth: componentWidth,\n        cellComponent: tdComponent,\n        colSpan: flattenColumns.length\n      }, emptyNode);\n    }\n\n    var columnsKey = getColumnsKey(flattenColumns);\n    return React.createElement(WrapperComponent, {\n      className: \"\".concat(prefixCls, \"-tbody\")\n    }, measureColumnWidth && React.createElement(\"tr\", {\n      \"aria-hidden\": \"true\",\n      className: \"\".concat(prefixCls, \"-measure-row\"),\n      style: {\n        height: 0\n      }\n    }, columnsKey.map(function (columnKey) {\n      return React.createElement(ResizeObserver, {\n        key: columnKey,\n        onResize: function onResize(_ref2) {\n          var offsetWidth = _ref2.offsetWidth;\n          onColumnResize(columnKey, offsetWidth);\n        }\n      }, React.createElement(\"td\", {\n        style: {\n          padding: 0,\n          border: 0,\n          height: 0\n        }\n      }));\n    })), rows);\n  }, [data, prefixCls, onRow, measureColumnWidth, stickyOffsets, expandedKeys, getRowKey, getComponent, componentWidth, emptyNode]);\n}\n\nvar MemoBody = React.memo(Body);\nMemoBody.displayName = 'Body';\nexport default MemoBody;","map":{"version":3,"sources":["/home/minhtranin/work/treenode/node_modules/rc-table/es/Body/index.js"],"names":["React","ResizeObserver","BodyRow","TableContext","ExpandedRow","BodyContext","getColumnsKey","ResizeContext","Body","_ref","data","getRowKey","measureColumnWidth","stickyOffsets","expandedKeys","onRow","rowExpandable","emptyNode","childrenColumnName","_React$useContext","useContext","onColumnResize","_React$useContext2","prefixCls","getComponent","_React$useContext3","fixHeader","horizonScroll","flattenColumns","componentWidth","useMemo","WrapperComponent","trComponent","tdComponent","rows","length","map","record","index","key","createElement","rowKey","recordKey","rowComponent","cellComponent","expanded","className","concat","fixColumn","component","colSpan","columnsKey","style","height","columnKey","onResize","_ref2","offsetWidth","padding","border","MemoBody","memo","displayName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport ResizeObserver from 'rc-resize-observer';\nimport BodyRow from './BodyRow';\nimport TableContext from '../context/TableContext';\nimport ExpandedRow from './ExpandedRow';\nimport BodyContext from '../context/BodyContext';\nimport { getColumnsKey } from '../utils/valueUtil';\nimport ResizeContext from '../context/ResizeContext';\n\nfunction Body(_ref) {\n  var data = _ref.data,\n      getRowKey = _ref.getRowKey,\n      measureColumnWidth = _ref.measureColumnWidth,\n      stickyOffsets = _ref.stickyOffsets,\n      expandedKeys = _ref.expandedKeys,\n      onRow = _ref.onRow,\n      rowExpandable = _ref.rowExpandable,\n      emptyNode = _ref.emptyNode,\n      childrenColumnName = _ref.childrenColumnName;\n\n  var _React$useContext = React.useContext(ResizeContext),\n      onColumnResize = _React$useContext.onColumnResize;\n\n  var _React$useContext2 = React.useContext(TableContext),\n      prefixCls = _React$useContext2.prefixCls,\n      getComponent = _React$useContext2.getComponent;\n\n  var _React$useContext3 = React.useContext(BodyContext),\n      fixHeader = _React$useContext3.fixHeader,\n      horizonScroll = _React$useContext3.horizonScroll,\n      flattenColumns = _React$useContext3.flattenColumns,\n      componentWidth = _React$useContext3.componentWidth;\n\n  return React.useMemo(function () {\n    var WrapperComponent = getComponent(['body', 'wrapper'], 'tbody');\n    var trComponent = getComponent(['body', 'row'], 'tr');\n    var tdComponent = getComponent(['body', 'cell'], 'td');\n    var rows;\n\n    if (data.length) {\n      rows = data.map(function (record, index) {\n        var key = getRowKey(record, index);\n        return [React.createElement(BodyRow, {\n          key: key,\n          rowKey: key,\n          record: record,\n          recordKey: key,\n          index: index,\n          rowComponent: trComponent,\n          cellComponent: tdComponent,\n          stickyOffsets: stickyOffsets,\n          expandedKeys: expandedKeys,\n          onRow: onRow,\n          getRowKey: getRowKey,\n          rowExpandable: rowExpandable,\n          childrenColumnName: childrenColumnName\n        })];\n      });\n    } else {\n      rows = React.createElement(ExpandedRow, {\n        expanded: true,\n        className: \"\".concat(prefixCls, \"-placeholder\"),\n        prefixCls: prefixCls,\n        fixHeader: fixHeader,\n        fixColumn: horizonScroll,\n        horizonScroll: horizonScroll,\n        component: trComponent,\n        componentWidth: componentWidth,\n        cellComponent: tdComponent,\n        colSpan: flattenColumns.length\n      }, emptyNode);\n    }\n\n    var columnsKey = getColumnsKey(flattenColumns);\n    return React.createElement(WrapperComponent, {\n      className: \"\".concat(prefixCls, \"-tbody\")\n    }, measureColumnWidth && React.createElement(\"tr\", {\n      \"aria-hidden\": \"true\",\n      className: \"\".concat(prefixCls, \"-measure-row\"),\n      style: {\n        height: 0\n      }\n    }, columnsKey.map(function (columnKey) {\n      return React.createElement(ResizeObserver, {\n        key: columnKey,\n        onResize: function onResize(_ref2) {\n          var offsetWidth = _ref2.offsetWidth;\n          onColumnResize(columnKey, offsetWidth);\n        }\n      }, React.createElement(\"td\", {\n        style: {\n          padding: 0,\n          border: 0,\n          height: 0\n        }\n      }));\n    })), rows);\n  }, [data, prefixCls, onRow, measureColumnWidth, stickyOffsets, expandedKeys, getRowKey, getComponent, componentWidth, emptyNode]);\n}\n\nvar MemoBody = React.memo(Body);\nMemoBody.displayName = 'Body';\nexport default MemoBody;"]},"metadata":{},"sourceType":"module"}