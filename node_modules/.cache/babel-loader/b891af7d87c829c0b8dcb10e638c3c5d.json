{"ast":null,"code":"import _toConsumableArray from \"/home/minhtranin/work/treenode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/minhtranin/work/treenode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/minhtranin/work/treenode/src/MyModal.js\";\n\nimport React, { useState, useRef, useEffect, createRef } from \"react\";\nimport { TreeSelect, Input, Select, Button } from \"antd\";\nimport { FolderFilled, DeleteTwoTone, SaveTwoTone } from \"@ant-design/icons\";\nimport './styles.css';\nvar TreeNode = TreeSelect.TreeNode;\nvar Option = Select.Option;\nvar Search = Input.Search;\n\nvar Model = function Model() {\n  var treeData = [{\n    title: \"label\",\n    description: 'Visible to Everyone',\n    key: \"0\",\n    default: 'My folder name 1',\n    children: [{\n      title: \"select\",\n      default: 'all',\n      key: \"0-0\",\n      isLeaf: true\n    }, {\n      title: \"selectall\",\n      default: ['lucy'],\n      key: \"0-1\",\n      isLeaf: true\n    }, {\n      title: 'action',\n      key: \"0-2\",\n      isLeaf: true\n    }]\n  }];\n  var newDataDefault = {\n    title: \"input\",\n    description: 'Visible to Everyone',\n    default: '',\n    children: [{\n      title: \"select\",\n      default: 'all',\n      isLeaf: true\n    }, {\n      title: \"selectall\",\n      default: [],\n      isLeaf: true\n    }, {\n      title: 'action',\n      isLeaf: true\n    }]\n  };\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      open = _useState2[0],\n      setOpen = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      _useState4 = _slicedToArray(_useState3, 2),\n      value = _useState4[0],\n      setValue = _useState4[1];\n\n  var _useState5 = useState(treeData),\n      _useState6 = _slicedToArray(_useState5, 2),\n      data = _useState6[0],\n      setData = _useState6[1];\n\n  var _useState7 = useState(undefined),\n      _useState8 = _slicedToArray(_useState7, 2),\n      search = _useState8[0],\n      setSearch = _useState8[1];\n\n  var arrLength = data.length;\n  var elRefs = useRef([]);\n  var searchRef = useRef();\n  useEffect(function () {\n    console.log(searchRef);\n\n    if (searchRef.current) {\n      console.log(searchRef.current);\n    }\n  }, [searchRef, open]);\n  useEffect(function () {\n    if (elRefs.current.length !== arrLength) {\n      elRefs.current = Array(arrLength).fill().map(function (_, i) {\n        return elRefs.current[i] || createRef();\n      });\n    }\n  }, [data, arrLength]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"400px\",\n      margin: '30px auto'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TreeSelect, {\n    treeIcon: true,\n    treeDefaultExpandAll: true,\n    listHeight: 500,\n    showSearch: true,\n    className: \"g-tree-select\",\n    value: value,\n    onInputKeyDown: function onInputKeyDown(e) {\n      e.preventDefault();\n    },\n    filterTreeNode: function filterTreeNode(text, item) {\n      if (!data[item.value].default) return false;\n      console.log(data[item.value].default.toLowerCase().indexOf(text.toLowerCase()));\n\n      if (data[item.value].default.toLowerCase().indexOf(text.toLowerCase() !== -1)) {\n        console.log('+++');\n        return true;\n      }\n\n      return false;\n    },\n    searchValue: search,\n    dropdownRender: function dropdownRender(prop) {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"g-search-header\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Search, {\n        placeholder: \"Search\",\n        ref: searchRef,\n        style: {\n          width: '254px'\n        },\n        onChange: function onChange(ev) {\n          var textSearch = ev.target.value;\n          setSearch(textSearch);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        onClick: function onClick() {\n          var newData = [newDataDefault].concat(_toConsumableArray(data));\n          setData(newData);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }\n      }, \"Add New Folder\")), prop);\n    },\n    style: {\n      marginBottom: 8,\n      width: '100%'\n    },\n    placeholder: \"Please select\",\n    open: open,\n    onChange: function onChange(vl) {\n      setValue(vl);\n      setOpen(false);\n    },\n    onFocus: function onFocus(e) {\n      setOpen(true);\n      e.preventDefault();\n    },\n    onBlur: function onBlur() {},\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, data.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(TreeNode, {\n      key: index,\n      value: index,\n      icon: /*#__PURE__*/React.createElement(FolderFilled, {\n        style: {\n          fontSize: '20px',\n          paddingTop: '10px'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }\n      }),\n      isLeaf: item.title === 'label',\n      selectable: item.title === 'label',\n      title: /*#__PURE__*/React.createElement(React.Fragment, null, item.title === 'input' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Input, {\n        style: {\n          width: '202px'\n        },\n        onClick: function onClick() {\n          if (elRefs.current[index].current) {\n            elRefs.current[index].current.focus();\n          }\n        },\n        ref: elRefs.current[index],\n        placeholder: \"Enter new folder name\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 23\n        }\n      })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: '10px'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 25\n        }\n      }, item.default), /*#__PURE__*/React.createElement(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 25\n        }\n      }), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          paddingLeft: '35px',\n          fontSize: '11px'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 25\n        }\n      }, item.description))),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 20\n      }\n    }, item.title === 'input' && item.children.map(function (chil, cid) {\n      return /*#__PURE__*/React.createElement(TreeNode, {\n        key: \"\".concat(index, \"-\").concat(cid),\n        selectable: false,\n        value: \"\".concat(index, \"-\").concat(cid),\n        title: /*#__PURE__*/React.createElement(React.Fragment, null, chil.title === 'select' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Select, {\n          defaultValue: chil.default,\n          style: {\n            width: '202px'\n          },\n          onChange: function onChange(sc) {\n            var newData = data;\n            newData[index].children[cid].default = sc;\n            newData[index].children[cid + 1].default = [];\n            var children = newData[index].children.filter(function (e) {\n              return e.title !== 'selectall';\n            });\n\n            if (sc === 'one') {\n              newData[index].children = children;\n              newData[index].description = 'Visible to specific users';\n            }\n\n            if (sc === 'all') {\n              newData[index].description = 'Visible to Everyone';\n              newData[index].children = [children[0], newDataDefault.children[1], children[1]];\n            }\n\n            setData(_toConsumableArray(newData));\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(Option, {\n          value: \"all\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 31\n          }\n        }, \"Visible to Everyone\"), /*#__PURE__*/React.createElement(Option, {\n          value: \"one\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 31\n          }\n        }, \"Visible to specific users\"))) : chil.title === 'selectall' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Select, {\n          defaultValue: chil.default,\n          mode: \"multiple\",\n          style: {\n            width: '202px'\n          },\n          onChange: function onChange(sla) {\n            var newData = data;\n            newData[index].children[cid].default = sla;\n            setData(_toConsumableArray(newData));\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(Option, {\n          value: \"jack\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 31\n          }\n        }, \"Jack\"), /*#__PURE__*/React.createElement(Option, {\n          value: \"lucy\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 31\n          }\n        }, \"Lucy\"))) : chil.title === 'action' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"g-action\",\n          style: {\n            width: '202px'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(SaveTwoTone, {\n          twoToneColor: \"#44AEA0\",\n          style: {\n            fontSize: '25px'\n          },\n          onClick: function onClick() {\n            var newData = data;\n            var folderName = elRefs.current[index].current.state.value;\n            if (!folderName) return;\n            newData[index].title = 'label';\n            newData[index].default = folderName;\n            setData(_toConsumableArray(newData));\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 31\n          }\n        }), /*#__PURE__*/React.createElement(DeleteTwoTone, {\n          twoToneColor: \"#D3455C\",\n          style: {\n            fontSize: '25px'\n          },\n          onClick: function onClick() {\n            var newData = data.filter(function (_, i) {\n              return index !== i;\n            });\n            setData(_toConsumableArray(newData));\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 31\n          }\n        }))) : ''),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 26\n        }\n      });\n    }));\n  })));\n};\n\nexport default Model;","map":{"version":3,"sources":["/home/minhtranin/work/treenode/src/MyModal.js"],"names":["React","useState","useRef","useEffect","createRef","TreeSelect","Input","Select","Button","FolderFilled","DeleteTwoTone","SaveTwoTone","TreeNode","Option","Search","Model","treeData","title","description","key","default","children","isLeaf","newDataDefault","open","setOpen","undefined","value","setValue","data","setData","search","setSearch","arrLength","length","elRefs","searchRef","console","log","current","Array","fill","map","_","i","width","margin","e","preventDefault","text","item","toLowerCase","indexOf","prop","ev","textSearch","target","newData","marginBottom","vl","index","fontSize","paddingTop","focus","paddingLeft","chil","cid","sc","filter","sla","folderName","state"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, createRef } from \"react\";\nimport { TreeSelect, Input, Select, Button } from \"antd\";\nimport { FolderFilled, DeleteTwoTone, SaveTwoTone } from \"@ant-design/icons\";\nimport './styles.css'\nconst { TreeNode } = TreeSelect;\nconst { Option } = Select;\nconst { Search } = Input;\n\n\nconst Model = () => {\n  const treeData = [\n    {\n      title: \"label\",\n      description: 'Visible to Everyone',\n      key: \"0\",\n      default: 'My folder name 1',\n      children: [\n        {\n          title: \"select\",\n          default: 'all',\n          key: \"0-0\",\n          isLeaf: true\n        },\n        {\n          title: \"selectall\",\n          default: ['lucy'],\n          key: \"0-1\",\n          isLeaf: true\n        },\n        {\n          title: 'action',\n          key: \"0-2\",\n          isLeaf: true\n        }\n      ]\n    },\n  ];\n  const newDataDefault = {\n    title: \"input\",\n    description: 'Visible to Everyone',\n    default: '',\n    children: [\n      {\n        title: \"select\",\n        default: 'all',\n        isLeaf: true\n      },\n      {\n        title: \"selectall\",\n        default: [],\n        isLeaf: true\n      },\n      {\n        title: 'action',\n        isLeaf: true\n      }\n    ]\n  }\n\n  const [open, setOpen] = useState(false);\n  const [value, setValue] = useState(undefined);\n  const [data, setData] = useState(treeData)\n  const [search, setSearch] = useState(undefined)\n  const arrLength = data.length\n  const elRefs = useRef([])\n  const searchRef = useRef()\n\n  useEffect(() => {\n    console.log(searchRef)\n    if (searchRef.current) {\n      console.log(searchRef.current)\n    }\n  }, [searchRef, open])\n\n  useEffect(() => {\n    if (elRefs.current.length !== arrLength) {\n      elRefs.current = Array(arrLength).fill().map((_, i) => elRefs.current[i] || createRef());\n    }\n  }, [data, arrLength])\n\n  return (\n    <div style={{ width: \"400px\", margin: '30px auto' }}>\n      <TreeSelect\n        treeIcon\n        treeDefaultExpandAll\n        listHeight={500}\n        showSearch\n        className='g-tree-select'\n        value={value}\n        onInputKeyDown={(e) => {\n          e.preventDefault()\n        }}\n        filterTreeNode={(text, item) => {\n          if (!data[item.value].default) return false\n          console.log(data[item.value].default.toLowerCase().indexOf(text.toLowerCase()))\n          if (data[item.value].default.toLowerCase().indexOf(text.toLowerCase() !== -1)) {\n            console.log('+++')\n            return true\n          }\n          return false\n        }}\n        searchValue={search}\n        dropdownRender={(prop) => {\n          return <>\n            <div className=\"g-search-header\">\n              <Search\n                placeholder=\"Search\"\n                ref={searchRef}\n                style={{ width: '254px' }}\n                onChange={(ev) => {\n                  const textSearch = ev.target.value\n                  setSearch(textSearch) \n                }}\n              />\n              <Button\n                onClick={() => {\n                  const newData = [newDataDefault,...data]\n                  setData(newData)\n                }}\n              >\n                Add New Folder\n              </Button>\n            </div>\n            {prop}\n          </>\n        }}\n        style={{ marginBottom: 8, width: '100%' }}\n        placeholder=\"Please select\"\n        open={open}\n        onChange={(vl) => {\n          setValue(vl)\n          setOpen(false)\n        }}\n        onFocus={(e) => {\n          setOpen(true)\n          e.preventDefault()\n        }}\n        onBlur={() => {\n        }}\n      >\n        {\n          data.map((item, index) => {\n            return <TreeNode\n              key={index}\n              value={index}\n              icon={<FolderFilled style={{ fontSize: '20px', paddingTop: '10px' }} />}\n              isLeaf={item.title === 'label'}\n              selectable={item.title === 'label'}\n              title={\n                <>\n                  {\n                    item.title === 'input' ? <>\n                      <Input\n                        style={{ width: '202px' }}\n                        onClick={() => {\n                          if(elRefs.current[index].current) {\n                            elRefs.current[index].current.focus()\n                          }\n                        }}\n                        ref={elRefs.current[index]} placeholder=\"Enter new folder name\" />\n                    </> : <>\n                        <span style={{ paddingLeft: '10px'}}>{item.default}</span>\n                        <br></br>\n                        <span style={{ paddingLeft: '35px', fontSize: '11px' }}>{item.description}</span>\n                    </>\n                  }\n                </>\n              }\n            >\n              {item.title === 'input' &&\n                item.children.map((chil, cid) => {\n                  return <TreeNode\n                    key={`${index}-${cid}`}\n                    selectable={false}\n                    value={`${index}-${cid}`}\n                    title={\n                      <>\n                        {\n                          chil.title === 'select' ? <>\n                            <Select\n                              defaultValue={chil.default}\n                              style={{ width: '202px' }}\n                              onChange={(sc) => {\n                                const newData = data\n                                newData[index].children[cid].default = sc\n                                newData[index].children[cid+1].default = []\n                                const children = newData[index].children.filter(e => e.title !== 'selectall')\n                                if (sc === 'one') {\n                                  newData[index].children = children\n                                  newData[index].description = 'Visible to specific users'\n                                }\n                                if (sc === 'all') {\n                                  newData[index].description = 'Visible to Everyone'\n                                  newData[index].children = [\n                                    children[0],\n                                    newDataDefault.children[1],\n                                    children[1],\n                                  ]\n                                }\n                                setData([...newData])\n                                \n                              }}\n                            >\n                              <Option value=\"all\">Visible to Everyone</Option>\n                              <Option value=\"one\">Visible to specific users</Option>\n                            </Select>\n                          </> : chil.title === 'selectall' ? <>\n                            <Select\n                              defaultValue={chil.default}\n                              mode=\"multiple\"\n                              style={{ width: '202px' }}\n                              onChange={(sla) => {\n                                const newData = data\n                                newData[index].children[cid].default = sla\n                                setData([...newData])\n                                \n                              }}\n                            >\n                              <Option value=\"jack\">Jack</Option>\n                              <Option value=\"lucy\">Lucy</Option>\n                            </Select>\n                          </> : chil.title === 'action' ? <>\n                            <div\n                              className=\"g-action\"\n                              style={{\n                                width: '202px',\n                              }}\n                            >\n                              <SaveTwoTone\n                                twoToneColor=\"#44AEA0\"\n                                style={{ fontSize: '25px' }}\n                                onClick={() => {\n                                  const newData = data\n                                  const folderName = elRefs.current[index].current.state.value\n                                  if (!folderName) return\n                                  newData[index].title = 'label'\n                                  newData[index].default = folderName\n                                  setData([...newData])\n                                }}\n                              />\n                              <DeleteTwoTone\n                                twoToneColor=\"#D3455C\"\n                                style={{ fontSize: '25px' }}\n                                onClick={() => {\n                                  const newData = data.filter((_, i) => index !== i)\n                                  setData([...newData])\n                                }}\n                              />\n\n                            </div>\n                          </> : ''\n                        }\n                      </>\n                    }\n                  />\n                })\n              }\n            </TreeNode>\n          })\n        }\n      </TreeSelect>\n    </div>\n  );\n};\n\nexport default Model;\n"]},"metadata":{},"sourceType":"module"}